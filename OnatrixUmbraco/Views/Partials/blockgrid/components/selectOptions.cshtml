@using OnatrixUmbraco.Helpers
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@inject Signature Signature


@{
    var uniqueName = Model.Content.Value<string>("uniqueName").ToLower();
    var placeholderText = Model.Content.Value<string>("placeholderText");


    var isRequired = Model.Content.Value<bool>("isRequired");
    
    var requiredMessage = Model.Content.Value<string>("requiredMessage");

    var signature = (isRequired) ? Signature.GenerateSignature(uniqueName, isRequired, "") : null;

    var selectOptions = Model.Content.Value<IEnumerable<string>>("options") ?? null;


    var (mobileColumns, tabletColumns, laptopColumns, desktopColumns) = 
    (
        Model.Content.Value<int>("mobileColumns") > 0 ? Model.Content.Value<int>("mobileColumns") : 12,
        Model.Content.Value<int>("tabletColumns") > 0 ? Model.Content.Value<int>("tabletColumns") : 12,
        Model.Content.Value<int>("laptopColumns") > 0 ? Model.Content.Value<int>("laptopColumns") : 12,
        Model.ColumnSpan
    );

    var columnClass = $"col-{mobileColumns} col-md-{tabletColumns} col-lg-{laptopColumns} col-xl-{desktopColumns}";

    var selectedValue = ViewData[uniqueName]?.ToString() ?? "";

}

<div class="@uniqueName @columnClass">
    <label for="@uniqueName" class="form-label" hidden>@uniqueName</label>
    <select 
        name="Fields[@uniqueName]" 
        class="form-select @(ViewData[$"{uniqueName}Error"] != null ? "is-invalid" : (ViewData[$"{uniqueName}IsValid"] != null && (bool)ViewData[$"{uniqueName}IsValid"] ? "is-valid" : ""))"
        id="@uniqueName" >

        
        <option value="" selected="@(string.IsNullOrEmpty(selectedValue) ? "selected" : null)">@placeholderText</option>

      
        @foreach (var item in selectOptions)
        {
            <option value="@item" selected="@(selectedValue == item ? "selected" : null)">@item</option>
        }


    </select>

    @if (ViewData[$"{uniqueName}Error"] != null)
    {
        <div class="invalid-feedback">
            @ViewData[$"{uniqueName}Error"] 
        </div>
    }


    @if (isRequired)
    {
        
        
        <input type="hidden" name="ValidationRules[@uniqueName].IsRequired" value="true" />
        <input type="hidden" name="ValidationRules[@uniqueName].RequiredMessage" value="@requiredMessage" />


        @if (!string.IsNullOrEmpty(signature))
        {
            <input type="hidden" name="ValidationRules[@uniqueName].Signature" value="@signature" />
        }
    }
    
</div>