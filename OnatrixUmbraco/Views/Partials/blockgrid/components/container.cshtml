@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;


@{
    var containerBackgroundImage = Model?.Content.Value<IPublishedContent>("containerBackgroundImage")?.Url() ?? null;    
    var containsColumns = Model.Areas?.Any(area => area.Any(column => column.Content.ContentType.Alias == "columns")) ?? false;

    var placeContentCenter = Model.Content.Value<bool>("placeContentCenter");

    var createOverlap = Model.Content.Value<bool>("createOverlap");

    var containerBackgroundColor = Model.Content.Value<string>("containerBackgroundColor") ?? "";


    var colorLabel = Model.Content.Value<ColorPickerValueConverter.PickedColor>("containerBackgroundColor")?.Label;
    colorLabel = string.IsNullOrEmpty(colorLabel) || colorLabel.ToLower() == "none" ? "transparent" : colorLabel.ToLower();

    var spacingTopClass = Model.Content.Value<bool>("addSpaceToTop") ? "padding-t" : "";
    var spacingBottomClass = Model.Content.Value<bool>("addSpaceToBottom") ? "padding-b" : "";

    var shadowClass = Model.Content.Value<bool>("addShadow") ? "container-shadow" : "";
}


<div class="container bg-@colorLabel @spacingTopClass @spacingBottomClass @shadowClass">

    @if(!string.IsNullOrEmpty(containerBackgroundImage))
    {
        <div class="container-bg-image" style="background-image: url('@containerBackgroundImage');"></div>
    }
        @if (containsColumns)
        {
            <div class="content">
            @foreach (var area in Model.Areas)
            {
                <div class="row @(placeContentCenter ? "justify-content-center" : "") @(createOverlap ? "overlap" : "") ">
                    @foreach (var column in area)
                    {
                        @await Html.PartialAsync("~/Views/Partials/blockgrid/components/columns.cshtml", column)
                    }
                </div>
            }
            </div>
            
            
        }
        else {
            <div class="content">
                @await Html.GetBlockGridItemAreasHtmlAsync(Model)
            </div>
        }
</div>

