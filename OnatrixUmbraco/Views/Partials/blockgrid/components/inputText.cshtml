@using OnatrixUmbraco.Helpers
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@inject Signature Signature


@{

    var inputType = Model.Content.Value<string>("inputType").ToLower();


    var uniqueName = Model.Content.Value<string>("uniqueName").ToLower();
    var placeholderText = Model.Content.Value<string>("placeholderText");


    var isRequired = Model.Content.Value<bool>("isRequired");
    var requiredMessage = Model.Content.Value<string>("requiredMessage");
    
    var regex = Model.Content.Value<string>("regularExpressionPattern");

    var expressionMessage = Model.Content.Value<string>("expressionMessage");
    

    var signature = (isRequired || !string.IsNullOrEmpty(regex)) ? Signature.GenerateSignature(uniqueName, isRequired, regex) : null;


    var (mobileColumns, tabletColumns, laptopColumns, desktopColumns) = 
    (
        Model.Content.Value<int>("mobileColumns") > 0 ? Model.Content.Value<int>("mobileColumns") : 12,
        Model.Content.Value<int>("tabletColumns") > 0 ? Model.Content.Value<int>("tabletColumns") : 12,
        Model.Content.Value<int>("laptopColumns") > 0 ? Model.Content.Value<int>("laptopColumns") : 12,
        Model.ColumnSpan
    );

    var columnClass = $"col-{mobileColumns} col-md-{tabletColumns} col-lg-{laptopColumns} col-xl-{desktopColumns}";

}

<div class="@uniqueName @columnClass">
    <label for="@uniqueName" class="form-label" hidden>Test</label>
    <input type="@inputType" 
           name="Fields[@uniqueName]" 
           class="form-control @(ViewData[$"{uniqueName}Error"] != null ? "is-invalid" : (ViewData[$"{uniqueName}IsValid"] != null && (bool)ViewData[$"{uniqueName}IsValid"] ? "is-valid" : ""))"
           id="@uniqueName" 
           placeholder="@placeholderText" 
           value="@ViewData[uniqueName]">

    @if (ViewData[$"{uniqueName}Error"] != null)
    {
        <div class="invalid-feedback">
            @ViewData[$"{uniqueName}Error"] 
        </div>
    }


    @if (isRequired || !string.IsNullOrEmpty(regex))
    {
        
        @if (isRequired)
        {
            <input type="hidden" name="ValidationRules[@uniqueName].IsRequired" value="true" />
            <input type="hidden" name="ValidationRules[@uniqueName].RequiredMessage" value="@requiredMessage" />
        }

        @if (!string.IsNullOrEmpty(regex))
        {
            <input type="hidden" name="ValidationRules[@uniqueName].Regex" value="@regex" />
            <input type="hidden" name="ValidationRules[@uniqueName].ExpressionMessage" value="@expressionMessage" />
        }

   

        @if (!string.IsNullOrEmpty(signature))
        {
            <input type="hidden" name="ValidationRules[@uniqueName].Signature" value="@signature" />
        }
    }
    
</div>